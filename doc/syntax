program -> block
block   -> { decls stmts }
decls   -> decls decl | e
decl    -> BASIC init-decl ;
init-decl -> id | id = expr | id[NUM] | id[NUM(opt)] = {init-list}
init-list -> expr | init-list `,' expr
stmts -> stmts stmt | e
stmt  ->  if(bool) stmt
        | if(bool) stmt else stmt
        | while(bool) stmt
        | do stmt while(bool);
        | for(expr(opt);expr(opt);expr(opt)) stmt
        | break;
        | block
        | expr;
loc     -> id[bool] | id

expr    -> loc = bool | bool
bool    -> bool || join | join
join    -> join&&equality | equality
equality-> equality == rel | equality != rel | rel
rel     -> add|add < add | add > add | add == add | add <= add | add >= add | add != add;
add     -> add + term | add - term|term
term    -> term * unary|term / unary | unary
unary   -> !postfix | -postfix | INC postfix | DEC postfix | postfix
postfix -> factor DEC | factor INC | factor
factor  -> ( bool ) | loc | REAL | NUM | true | false
