program -> block
block   -> { decls stmts }
decls   -> decls decl | e
decl    -> BASIC init-decl ;
init-decl -> id | id = expr | id[NUM] | id[NUM(opt)] = {init-list}
init-list -> expr | init-list , expr
stmts -> stmts stmt | e
stmt  -> selection
        | iteratoion
        | block
        | expr ;
        | `printf' ( init_list ) ;
        | `return' ;

iteration -> `while' ( expr ) stmt
            | `do' stmt `while' ( expr ) ;
            | `for' ( expr ; expr ; expr) stmt
selection -> `if' ( expr ) stmt
            | `if' ( expr ) stmt `else' stmt

factor -> ID | NUM | ( expr ) | STR
postifix -> factor | factor [ expr ] | factor ++ | factor --
unary -> postifix | ! unary | - unary | ++ unary | -- unary
term -> term * unary | term / unary | unary
add  -> add + term | add - term | term
rel -> rel >= add | rel <= add | rel < add | rel > add | add
equality -> equality == rel | equality != rel | rel
join -> join && equality | equality
bool -> bool || join 
        | join
expr -> unary = expr | bool
expr    -> ID| NUM | LB expr RB | STR 

