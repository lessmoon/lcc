The map table:
1:$
0:%
4:e
3:i
5:others
2:s
The first table:
0:0 
1:1 
2:3 5 
3:3 
4:4 
5:5 
	>>2 -> 	 3 2
		 3 2 4 2
		 5
		
Calculate single symbol:
Calculate symbols list:
Calculate the closure of the I0
Original:
-1-> 2(0) [1]
2-> 3 2(0) [1]
2-> 3 2 4 2(0) [1]
2-> 5(0) [1]
After optimazing:
-1-> 2(0) [1]
2-> 3 2(0) [1]
2-> 3 2 4 2(0) [1]
2-> 5(0) [1]
Calculate the closure sets:
I0
-1-> 2(0) [1]
2-> 3 2(0) [1]
2-> 3 2 4 2(0) [1]
2-> 5(0) [1]
I1
-1-> 2(1) [1]
I2
2-> 3 2(1) [1]
2-> 3 2(0) [1]
2-> 3 2 4 2(0) [1]
2-> 5(0) [1]
2-> 3 2 4 2(1) [1]
2-> 3 2(0) [4]
2-> 3 2 4 2(0) [4]
2-> 5(0) [4]
I3
2-> 5(1) [1]
I4
2-> 3 2(2) [1]
2-> 3 2 4 2(2) [1]
I5
2-> 3 2(1) [1]
2-> 3 2(0) [1]
2-> 3 2 4 2(0) [1]
2-> 5(0) [1]
2-> 3 2 4 2(1) [1]
2-> 3 2(0) [4]
2-> 3 2 4 2(0) [4]
2-> 5(0) [4]
2-> 3 2(1) [4]
2-> 3 2 4 2(1) [4]
I6
2-> 5(1) [1]
2-> 5(1) [4]
I7
2-> 3 2 4 2(3) [1]
2-> 3 2(0) [1]
2-> 3 2 4 2(0) [1]
2-> 5(0) [1]
I8
2-> 3 2(2) [1]
2-> 3 2 4 2(2) [1]
2-> 3 2(2) [4]
2-> 3 2 4 2(2) [4]
I9
2-> 3 2 4 2(4) [1]
I10
2-> 3 2 4 2(3) [1]
2-> 3 2(0) [1]
2-> 3 2 4 2(0) [1]
2-> 5(0) [1]
2-> 3 2 4 2(3) [4]
2-> 3 2(0) [4]
2-> 3 2 4 2(0) [4]
2-> 5(0) [4]
I11
2-> 3 2 4 2(4) [1]
2-> 3 2 4 2(4) [4]
I	0	1	2	3	4	5	
I0	e0	e0	 1	s2	e0	s3	
I1	e0	r0	e0	e0	e0	e0	
I2	e0	e0	 4	s5	e0	s6	
I3	e0	r3	e0	e0	e0	e0	
I4	e0	r1	e0	e0	s7	e0	
I5	e0	e0	 8	s5	e0	s6	
I6	e0	r3	e0	e0	r3	e0	
I7	e0	e0	 9	s2	e0	s3	
I8	e0	r1	e0	e0  s10	e0	
I9	e0	r2	e0	e0	e0	e0	
I10	e0	e0	 11	s5	e0	s6	
I11	e0	r2	e0	e0	r2	e0	

int cctab[12][6][2]={
{{3,0},{3,0},{2,1},{1,2},{3,0},{1,3}},
{{3,0},{0,0},{3,0},{3,0},{3,0},{3,0}},
{{3,0},{3,0},{2,4},{1,5},{3,0},{1,6}},
{{3,0},{0,3},{3,0},{3,0},{3,0},{3,0}},
{{3,0},{0,1},{3,0},{3,0},{1,7},{3,0}},
{{3,0},{3,0},{2,8},{1,5},{3,0},{1,6}},
{{3,0},{0,3},{3,0},{3,0},{0,3},{3,0}},
{{3,0},{3,0},{2,9},{1,2},{3,0},{1,3}},
{{3,0},{0,1},{3,0},{3,0},{1,10},{3,0}},
{{3,0},{0,2},{3,0},{3,0},{3,0},{3,0}},
{{3,0},{3,0},{2,11},{1,5},{3,0},{1,6}},
{{3,0},{0,2},{3,0},{3,0},{0,2},{3,0}}
};
parser(){
stack<int> status;
stack<int> products;
int sym,top;
status.push(0);//push the start status
products.push(1);//push the end symbol to the productssym = lexer.scan();
top = status.top();
while(true){
	if(atab[top][sym][0] == SEND){
	products.push(sym);
	status.push(atab[top][sym][1]);
	sym = lexer.scan();
	}else if(atab[top][sym][0] == REDUCE){
		if(atab[top][sym][1] == 0){//it is the accept position
			break;
		}
		switch(atab[top][sym][1]){
		}
	}else{
		error();
	}
}
}//function parser()
1:$
0:%
4:e
3:i
5:others
2:s
